// Mocks generated by Mockito 5.4.2 from annotations
// in nytimes/test/state/article_listing/article_listing_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:nytimes/modal/article.dart' as _i10;
import 'package:nytimes/modal/article_listing_content_type.dart' as _i11;
import 'package:nytimes/modal/document_article.dart' as _i9;
import 'package:nytimes/modal/failure_response.dart' as _i8;
import 'package:nytimes/service/article_store.dart' as _i6;
import 'package:nytimes/service/drift_db/data_model/article_data_model.dart'
    as _i4;
import 'package:nytimes/service/drift_db/data_model/document_article_data_model.dart'
    as _i5;
import 'package:nytimes/service/drift_db/drift_db.dart' as _i3;
import 'package:nytimes/service/drift_db_store.dart' as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDriftDB_1 extends _i1.SmartFake implements _i3.DriftDB {
  _FakeDriftDB_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeArticleDataModel_2 extends _i1.SmartFake
    implements _i4.ArticleDataModel {
  _FakeArticleDataModel_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDocumentArticleDataModel_3 extends _i1.SmartFake
    implements _i5.DocumentArticleDataModel {
  _FakeDocumentArticleDataModel_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ArticleStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockArticleStore extends _i1.Mock implements _i6.ArticleStore {
  MockArticleStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Either<_i8.FailureResponse, List<_i9.DocumentArticle>>>
      searchDocumentArticles(
    String? keyword, {
    int? pageNumber = 1,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #searchDocumentArticles,
              [keyword],
              {#pageNumber: pageNumber},
            ),
            returnValue: _i7.Future<
                    _i2.Either<_i8.FailureResponse,
                        List<_i9.DocumentArticle>>>.value(
                _FakeEither_0<_i8.FailureResponse, List<_i9.DocumentArticle>>(
              this,
              Invocation.method(
                #searchDocumentArticles,
                [keyword],
                {#pageNumber: pageNumber},
              ),
            )),
          ) as _i7.Future<
              _i2.Either<_i8.FailureResponse, List<_i9.DocumentArticle>>>);
  @override
  _i7.Future<_i2.Either<_i8.FailureResponse, List<_i10.Article>>> fetchArticles(
          _i11.ArticleListingContentType? articleListingContentType) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchArticles,
          [articleListingContentType],
        ),
        returnValue: _i7
            .Future<_i2.Either<_i8.FailureResponse, List<_i10.Article>>>.value(
            _FakeEither_0<_i8.FailureResponse, List<_i10.Article>>(
          this,
          Invocation.method(
            #fetchArticles,
            [articleListingContentType],
          ),
        )),
      ) as _i7.Future<_i2.Either<_i8.FailureResponse, List<_i10.Article>>>);
}

/// A class which mocks [DriftDBStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockDriftDBStore extends _i1.Mock implements _i12.DriftDBStore {
  MockDriftDBStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.DriftDB get db => (super.noSuchMethod(
        Invocation.getter(#db),
        returnValue: _FakeDriftDB_1(
          this,
          Invocation.getter(#db),
        ),
      ) as _i3.DriftDB);
  @override
  _i7.Future<_i4.ArticleDataModel> createOrUpdateArticle(
    _i10.Article? article,
    _i11.ArticleListingContentType? articleListingContentType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createOrUpdateArticle,
          [
            article,
            articleListingContentType,
          ],
        ),
        returnValue:
            _i7.Future<_i4.ArticleDataModel>.value(_FakeArticleDataModel_2(
          this,
          Invocation.method(
            #createOrUpdateArticle,
            [
              article,
              articleListingContentType,
            ],
          ),
        )),
      ) as _i7.Future<_i4.ArticleDataModel>);
  @override
  _i7.Future<List<_i4.ArticleDataModel>> fetchArticles(
          _i11.ArticleListingContentType? articleListingContentType) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchArticles,
          [articleListingContentType],
        ),
        returnValue: _i7.Future<List<_i4.ArticleDataModel>>.value(
            <_i4.ArticleDataModel>[]),
      ) as _i7.Future<List<_i4.ArticleDataModel>>);
  @override
  _i7.Future<_i5.DocumentArticleDataModel> createOrUpdateDocumentArticle(
          _i9.DocumentArticle? documentArticle) =>
      (super.noSuchMethod(
        Invocation.method(
          #createOrUpdateDocumentArticle,
          [documentArticle],
        ),
        returnValue: _i7.Future<_i5.DocumentArticleDataModel>.value(
            _FakeDocumentArticleDataModel_3(
          this,
          Invocation.method(
            #createOrUpdateDocumentArticle,
            [documentArticle],
          ),
        )),
      ) as _i7.Future<_i5.DocumentArticleDataModel>);
  @override
  _i7.Future<List<_i5.DocumentArticleDataModel>> fetchDocumentArticles(
          String? keyword) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchDocumentArticles,
          [keyword],
        ),
        returnValue: _i7.Future<List<_i5.DocumentArticleDataModel>>.value(
            <_i5.DocumentArticleDataModel>[]),
      ) as _i7.Future<List<_i5.DocumentArticleDataModel>>);
}
