// Mocks generated by Mockito 5.4.2 from annotations
// in nytimes/test/ui/home/home_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i2;

import 'package:connectivity_plus/connectivity_plus.dart' as _i8;
import 'package:flutter_bloc/flutter_bloc.dart' as _i9;
import 'package:geolocator/geolocator.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:nytimes/state/home/home_cubit.dart' as _i11;
import 'package:nytimes/state/home/home_state.dart' as _i6;
import 'package:nytimes/state/location/location_cubit.dart' as _i10;
import 'package:nytimes/state/location/location_state.dart' as _i4;
import 'package:nytimes/state/network/network_cubit.dart' as _i7;
import 'package:nytimes/state/network/network_state.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStreamSubscription_0<T> extends _i1.SmartFake
    implements _i2.StreamSubscription<T> {
  _FakeStreamSubscription_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNetworkState_1 extends _i1.SmartFake implements _i3.NetworkState {
  _FakeNetworkState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLocationState_2 extends _i1.SmartFake implements _i4.LocationState {
  _FakeLocationState_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePosition_3 extends _i1.SmartFake implements _i5.Position {
  _FakePosition_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHomeState_4 extends _i1.SmartFake implements _i6.HomeState {
  _FakeHomeState_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NetworkCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkCubit extends _i1.Mock implements _i7.NetworkCubit {
  @override
  _i2.StreamSubscription<_i8.ConnectivityResult>
      get connectivityStreamSubscription => (super.noSuchMethod(
            Invocation.getter(#connectivityStreamSubscription),
            returnValue: _FakeStreamSubscription_0<_i8.ConnectivityResult>(
              this,
              Invocation.getter(#connectivityStreamSubscription),
            ),
            returnValueForMissingStub:
                _FakeStreamSubscription_0<_i8.ConnectivityResult>(
              this,
              Invocation.getter(#connectivityStreamSubscription),
            ),
          ) as _i2.StreamSubscription<_i8.ConnectivityResult>);
  @override
  set connectivityStreamSubscription(
          _i2.StreamSubscription<_i8.ConnectivityResult>?
              _connectivityStreamSubscription) =>
      super.noSuchMethod(
        Invocation.setter(
          #connectivityStreamSubscription,
          _connectivityStreamSubscription,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.NetworkState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeNetworkState_1(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeNetworkState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.NetworkState);
  @override
  _i2.Stream<_i3.NetworkState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i2.Stream<_i3.NetworkState>.empty(),
        returnValueForMissingStub: _i2.Stream<_i3.NetworkState>.empty(),
      ) as _i2.Stream<_i3.NetworkState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i2.Future<void> notifyOfCurrentNetworkStatusWhenDisconnected() =>
      (super.noSuchMethod(
        Invocation.method(
          #notifyOfCurrentNetworkStatusWhenDisconnected,
          [],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
  @override
  _i2.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
  @override
  void emit(_i3.NetworkState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i9.Change<_i3.NetworkState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [LocationCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationCubit extends _i1.Mock implements _i10.LocationCubit {
  @override
  set positionStream(_i2.StreamSubscription<_i5.Position>? _positionStream) =>
      super.noSuchMethod(
        Invocation.setter(
          #positionStream,
          _positionStream,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set serviceStatusStream(
          _i2.StreamSubscription<_i5.ServiceStatus>? _serviceStatusStream) =>
      super.noSuchMethod(
        Invocation.setter(
          #serviceStatusStream,
          _serviceStatusStream,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.LocationState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeLocationState_2(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeLocationState_2(
          this,
          Invocation.getter(#state),
        ),
      ) as _i4.LocationState);
  @override
  _i2.Stream<_i4.LocationState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i2.Stream<_i4.LocationState>.empty(),
        returnValueForMissingStub: _i2.Stream<_i4.LocationState>.empty(),
      ) as _i2.Stream<_i4.LocationState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i2.Future<_i5.Position> getCurrentLocation() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentLocation,
          [],
        ),
        returnValue: _i2.Future<_i5.Position>.value(_FakePosition_3(
          this,
          Invocation.method(
            #getCurrentLocation,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i2.Future<_i5.Position>.value(_FakePosition_3(
          this,
          Invocation.method(
            #getCurrentLocation,
            [],
          ),
        )),
      ) as _i2.Future<_i5.Position>);
  @override
  void subscribeToLocationUpdate() => super.noSuchMethod(
        Invocation.method(
          #subscribeToLocationUpdate,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void subscribeToLocationServiceChange() => super.noSuchMethod(
        Invocation.method(
          #subscribeToLocationServiceChange,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.Future<bool> isLocationServiceEnabled() => (super.noSuchMethod(
        Invocation.method(
          #isLocationServiceEnabled,
          [],
        ),
        returnValue: _i2.Future<bool>.value(false),
        returnValueForMissingStub: _i2.Future<bool>.value(false),
      ) as _i2.Future<bool>);
  @override
  _i2.Future<void> requestLocationPermission() => (super.noSuchMethod(
        Invocation.method(
          #requestLocationPermission,
          [],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
  @override
  _i2.Future<bool> openLocationSettings() => (super.noSuchMethod(
        Invocation.method(
          #openLocationSettings,
          [],
        ),
        returnValue: _i2.Future<bool>.value(false),
        returnValueForMissingStub: _i2.Future<bool>.value(false),
      ) as _i2.Future<bool>);
  @override
  _i2.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
  @override
  void emit(_i4.LocationState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i9.Change<_i4.LocationState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [HomeCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeCubit extends _i1.Mock implements _i11.HomeCubit {
  @override
  _i6.HomeState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeHomeState_4(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeHomeState_4(
          this,
          Invocation.getter(#state),
        ),
      ) as _i6.HomeState);
  @override
  _i2.Stream<_i6.HomeState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i2.Stream<_i6.HomeState>.empty(),
        returnValueForMissingStub: _i2.Stream<_i6.HomeState>.empty(),
      ) as _i2.Stream<_i6.HomeState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void addLocationSection(_i5.Position? position) => super.noSuchMethod(
        Invocation.method(
          #addLocationSection,
          [position],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeLocationSection() => super.noSuchMethod(
        Invocation.method(
          #removeLocationSection,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i6.HomeState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i9.Change<_i6.HomeState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
}
